# 定义Job任务脚本流程顺序：构建 -> 部署（测试） -> 发布（线上）
stages:
  - build
  - deploy
  - publish

# 执行构建测试环境脚本
Build_Test_Job:
  stage: build     # 流程阶段
  image: docker:latest
  services:
    - docker:dind  # dind意思是Docker in Docker, 让你的 CI-Job能在Runner容器里直接执行 Docker 命令（比如 docker build、docker run 等），就像在物理机上一样。
  when: manual     # 手动触发， 可以自定义条件触发 
  only:
    - /^\d{8}$/    # 限制分支，正则表达式匹配只有分支名包含8个数字的才能生成此脚本【具体原因见末尾《1》】
  tags: 
    - webPro       # tags匹配Runner，只有Runner具有这个Tag，任务才能在这个Runner上执行，【查看Runner-Tag见《2》】
  script:
    - echo "开始构建测试环境Docker镜像..."    # echo 是输出日志
    - docker build --build-arg BUILD_SCRIPT=stage -t webpack_study:latest .  # docker构建一个镜像 命名为webpack_study标签为latest
    - docker save webpack_study:latest -o webpack_study.tar # 将构建好的镜像保存为tar文件
    - echo "测试环境Docker镜像构建并打包为tar文件完成!"
    - echo "尝试导出构建产物dist文件夹和打包镜像..."
    - docker create --name temp_container webpack_study:latest  # 创建一个临时容器加载镜像
    - docker cp temp_container:/usr/share/nginx/html ./dist     # 从临时容器中导出build产物
    - docker rm temp_container                                  # 删除临时容器
    - echo "导出构建产物dist文件夹和打包镜像完成..."
  artifacts:
    paths:
      - webpack_study.tar  # docker产物
      - dist

Deploy_Test_Job:
  stage: deploy
  image: docker:latest
  services:
    - docker:dind
  when: manual
  only:
    - /^\d{8}$/
  tags: 
    - webPro
  needs: ["Build_Test_Job"] # 执行必要的前置条件
  script:
    - echo "开始在Docker容器上部署测试环境镜像..."
    - docker load -i webpack_study.tar              # 加载build阶段产物（打包的镜像）到本地
    - docker stop docker_webpack_study || true      # 如果有 容器叫 docker_webpack_study, 将其停止并移除
    - docker rm docker_webpack_study || true
    - docker run -d --name docker_webpack_study -p 8087:80 webpack_study:latest # 启动容器docker_webpack_study加载镜像webpack_study:latest把容器的80端口映射到服务器的8087端口
    - echo "测试环境Docker容器上部署镜像完成!"

# 执行构建线上环境脚本
Build_Online_Job:
  stage: build     # 流程阶段
  image: docker:latest
  services:
    - docker:dind
  when: manual     # 手动触发， 可以自定义条件触发 
  only:
    - /^\d{8}$/    # 限制分支，正则表达式匹配只有分支名包含8个数字的才能生成此脚本【具体原因见末尾《1》】
  tags: 
    - webPro       # tags匹配Runner，只有Runner具有这个Tag，任务才能在这个Runner上执行，【查看Runner-Tag见《2》】
  script:
    - echo "开始构建线上环境Docker镜像..."    # echo 是输出日志
    - docker build --build-arg BUILD_SCRIPT=product -t webpack_study_online:latest .  # docker构建一个镜像 命名为webpack_study标签为latest
    - docker save webpack_study_online:latest -o webpack_study_online.tar # 将构建好的镜像保存为tar文件
    - echo "线上环境Docker镜像构建并打包为tar文件完成!"
    - echo "尝试导出构建产物dist_online文件夹和打包镜像..."
    - docker create --name temp_container webpack_study_online:latest  # 创建一个临时容器加载镜像
    - docker cp temp_container:/usr/share/nginx/html ./dist_online     # 从临时容器中导出build产物
    - docker rm temp_container                                  # 删除临时容器
    - echo "导出构建产物dist_online文件夹和打包镜像完成..."
  artifacts:
    paths:
      - webpack_study_online.tar  # docker产物
      - dist_online

Publish_Online_Job:
  stage: publish
  image: docker:latest
  services:
    - docker:dind
  when: manual
  only:
    - /^\d{8}$/
  tags: 
    - webPro
  needs: ["Build_Online_Job"] # 执行必要的前置条件
  script:
    - echo "开始在Docker容器上部署线上环境镜像..."
    - docker load -i webpack_study_online.tar              # 加载build阶段产物（打包的镜像）到本地
    - docker stop docker_webpack_study_online || true      # 如果有 容器叫 docker_webpack_study, 将其停止并移除
    - docker rm docker_webpack_study_online || true
    - docker run -d --name docker_webpack_study_online -p 8089:80 webpack_study_online:latest # 启动容器docker_webpack_study加载镜像webpack_study:latest把容器的80端口映射到服务器的8087端口
    - echo "线上环境Docker容器上部署镜像完成!"

#《1》
# 需求决定：前端项目因为每周五都要发一次版本，分支名字就是 20250718，分支上线后会合并到main分支，main分支的代码就是稳定的，所以打包构建分支只允许周分支生成Job
#《2》
# GitLab -> Project -> setting -> CI/CD -> Runner
# 云服务器测试环境端口是：8087
# 云服务器线上环境端口是：8089